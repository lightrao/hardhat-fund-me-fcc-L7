{
    "address": "0x5C6d0195C4Cdc8DEB6EA786B8Bd1f437B1A52a8d",
    "abi": [
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "priceFeedAddress",
                    "type": "address"
                }
            ],
            "stateMutability": "nonpayable",
            "type": "constructor"
        },
        {
            "inputs": [],
            "name": "FundMe__NotOwner",
            "type": "error"
        },
        {
            "stateMutability": "payable",
            "type": "fallback"
        },
        {
            "inputs": [],
            "name": "MINIMUM_USD",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "cheaperWithdraw",
            "outputs": [],
            "stateMutability": "payable",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "fund",
            "outputs": [],
            "stateMutability": "payable",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "funder",
                    "type": "address"
                }
            ],
            "name": "getAddressToAmountFunded",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "uint256",
                    "name": "index",
                    "type": "uint256"
                }
            ],
            "name": "getFunder",
            "outputs": [
                {
                    "internalType": "address",
                    "name": "",
                    "type": "address"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "getOwner",
            "outputs": [
                {
                    "internalType": "address",
                    "name": "",
                    "type": "address"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "getPriceFeed",
            "outputs": [
                {
                    "internalType": "contract AggregatorV3Interface",
                    "name": "",
                    "type": "address"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "getVersion",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "withdraw",
            "outputs": [],
            "stateMutability": "payable",
            "type": "function"
        },
        {
            "stateMutability": "payable",
            "type": "receive"
        }
    ],
    "transactionHash": "0x7497a151db7ffad260132de36065732400b237ccd869c2679d3d0356fd06e767",
    "receipt": {
        "to": null,
        "from": "0xB5556200DbFe796370b2a131E106Ba87df39d881",
        "contractAddress": "0x5C6d0195C4Cdc8DEB6EA786B8Bd1f437B1A52a8d",
        "transactionIndex": 26,
        "gasUsed": "1126086",
        "logsBloom": "0x
        "blockHash": "0x0fe0bd467c167cfe8a6d27794a861395d5ba70e3bc1aad690e9fe0961f8a51a6",
        "transactionHash": "0x7497a151db7ffad260132de36065732400b237ccd869c2679d3d0356fd06e767",
        "logs": [],
        "blockNumber": 11274209,
        "cumulativeGasUsed": "2895553",
        "status": 1,
        "byzantium": true
    },
    "args": ["0x8A753747A1Fa494EC906cE90E9f37563A8AF630e"],
    "numDeployments": 2,
    "solcInputHash": "d93e3c3c7a1ef870758014bc3bb0fd69",
    "metadata": "{\"compiler\":{\"version\":\"0.8.8+commit.dddeac2f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"priceFeedAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"FundMe__NotOwner\",\"type\":\"error\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"MINIMUM_USD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cheaperWithdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fund\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"funder\",\"type\":\"address\"}],\"name\":\"getAddressToAmountFunded\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getFunder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPriceFeed\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVersion\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"author\":\"Light Rao\",\"details\":\"This implements price feeds as our library\",\"kind\":\"dev\",\"methods\":{\"fund()\":{\"details\":\"This implements price feeds as our library\"}},\"title\":\"A contract for crowd fundding\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"constructor\":{\"notice\":\"constructor\"},\"fund()\":{\"notice\":\"This function funds this contract\"},\"getOwner()\":{\"notice\":\"view / pure\"}},\"notice\":\"This contract is to demao a simple fundding contract\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FundMe.sol\":\"FundMe\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0x6e6e4b0835904509406b070ee173b5bc8f677c19421b76be38aea3b1b3d30846\",\"license\":\"MIT\"},\"contracts/FundMe.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Pragam\\npragma solidity ^0.8.8;\\n// imports\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\nimport \\\"./PriceConverter.sol\\\";\\n// Error codes\\nerror FundMe__NotOwner();\\n\\n// Interfaces, Libraries, Contracts\\n\\n/** @title A contract for crowd fundding\\n *  @author Light Rao\\n *  @notice This contract is to demao a simple fundding contract\\n *  @dev This implements price feeds as our library\\n */\\ncontract FundMe {\\n    // 1.Type declarations\\n    using PriceConverter for uint256;\\n    // 2.State variables\\n    mapping(address => uint256) private s_addressToAmountFunded;\\n    address[] private s_funders;\\n\\n    // Could we make this constant?  /* hint: no! We should make it immutable! */\\n    address private immutable i_owner;\\n    uint256 public constant MINIMUM_USD = 50 * 10**18;\\n    AggregatorV3Interface private s_priceFeed;\\n    // 3.Events\\n    // _;\\n    // 4.Modifiers\\n    modifier onlyOwner() {\\n        if (msg.sender != i_owner) revert FundMe__NotOwner();\\n        _;\\n    }\\n\\n    // 5.Functions\\n    /// constructor\\n    constructor(address priceFeedAddress) {\\n        i_owner = msg.sender;\\n        s_priceFeed = AggregatorV3Interface(priceFeedAddress);\\n    }\\n\\n    /// receive\\n    receive() external payable {\\n        fund();\\n    }\\n\\n    /// fallback\\n    fallback() external payable {\\n        fund();\\n    }\\n\\n    /// external\\n    /// _;\\n\\n    /// public\\n\\n    /**\\n     *  @notice This function funds this contract\\n     *  @dev This implements price feeds as our library\\n     */\\n    function fund() public payable {\\n        require(\\n            msg.value.getConversionRate(s_priceFeed) >= MINIMUM_USD,\\n            \\\"You need to spend more ETH!\\\"\\n        );\\n        s_addressToAmountFunded[msg.sender] += msg.value;\\n        s_funders.push(msg.sender);\\n    }\\n\\n    function getVersion() public view returns (uint256) {\\n        return s_priceFeed.version();\\n    }\\n\\n    function withdraw() public payable onlyOwner {\\n        for (\\n            uint256 funderIndex = 0;\\n            funderIndex < s_funders.length;\\n            funderIndex++\\n        ) {\\n            address funder = s_funders[funderIndex];\\n            s_addressToAmountFunded[funder] = 0; // reset map structure's value to 0\\n        }\\n        s_funders = new address[](0); // funders point to recreated array which include 0 items\\n\\n        (bool callSuccess, ) = payable(msg.sender).call{\\n            value: address(this).balance\\n        }(\\\"\\\");\\n        require(callSuccess, \\\"Call withdraw failed\\\");\\n    }\\n\\n    function cheaperWithdraw() public payable onlyOwner {\\n        address[] memory funders = s_funders;\\n        // mapping can't be in memory sorry!\\n        for (\\n            uint256 funderIndex = 0;\\n            funderIndex < funders.length;\\n            funderIndex++\\n        ) {\\n            address funder = funders[funderIndex];\\n            s_addressToAmountFunded[funder] = 0;\\n        }\\n        s_funders = new address[](0);\\n        (bool success, ) = i_owner.call{value: address(this).balance}(\\\"\\\");\\n        require(success, \\\"Cheaper withdraw failed!\\\");\\n    }\\n\\n    /// internal\\n\\n    /// private\\n\\n    /// view / pure\\n    function getOwner() public view returns (address) {\\n        return i_owner;\\n    }\\n\\n    function getFunder(uint256 index) public view returns (address) {\\n        return s_funders[index];\\n    }\\n\\n    function getAddressToAmountFunded(address funder)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        return s_addressToAmountFunded[funder];\\n    }\\n\\n    function getPriceFeed() public view returns (AggregatorV3Interface) {\\n        return s_priceFeed;\\n    }\\n}\\n\",\"keccak256\":\"0x903aa320c5ab789764948f4015b661a93c88c27aeb4c932d223e1a727a662fa4\",\"license\":\"MIT\"},\"contracts/PriceConverter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\n\\n// Why is this a library and not abstract?\\n// Why not an interface?\\nlibrary PriceConverter {\\n    // We could make this public, but then we'd have to deploy it\\n    function getPrice(AggregatorV3Interface priceFeed)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        // Rinkeby ETH / USD Address\\n        // https://docs.chain.link/docs/ethereum-addresses/\\n        // AggregatorV3Interface priceFeed = AggregatorV3Interface(\\n        //     0x8A753747A1Fa494EC906cE90E9f37563A8AF630e\\n        // );\\n        (, int256 answer, , , ) = priceFeed.latestRoundData();\\n        // ETH/USD rate in 18 digit\\n        return uint256(answer * 10000000000);\\n    }\\n\\n    // 1000000000\\n    function getConversionRate(\\n        uint256 ethAmount,\\n        AggregatorV3Interface priceFeed\\n    ) internal view returns (uint256) {\\n        uint256 ethPrice = getPrice(priceFeed);\\n        uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1000000000000000000;\\n        // the actual ETH/USD conversion rate, after adjusting the extra 0s.\\n        return ethAmountInUsd;\\n    }\\n}\\n\",\"keccak256\":\"0x222f8b912c930f71a2d5b21cc91409442039a2fd5e7d3c53a901751ada1cd559\",\"license\":\"MIT\"}},\"version\":1}",
    "bytecode": "0x60a06040523480156200001157600080fd5b506040516200148838038062001488833981810160405281019062000037919062000120565b3373ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b8152505080600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505062000152565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620000e882620000bb565b9050919050565b620000fa81620000db565b81146200010657600080fd5b50565b6000815190506200011a81620000ef565b92915050565b600060208284031215620001395762000138620000b6565b5b6000620001498482850162000109565b91505092915050565b60805160601c611302620001866000396000818161041201528181610661015281816106b101526108a701526113026000f3fe60806040526004361061008a5760003560e01c8063893d20e811610059578063893d20e8146101405780639e87a5cd1461016b578063b60d428814610196578063be2693f0146101a0578063d7b4750c146101aa57610099565b80630343fb25146100a35780630d8e6e2c146100e05780633ccfd60b1461010b5780636b69a5921461011557610099565b36610099576100976101e7565b005b6100a16101e7565b005b3480156100af57600080fd5b506100ca60048036038101906100c59190610ba1565b610321565b6040516100d79190610be7565b60405180910390f35b3480156100ec57600080fd5b506100f5610369565b6040516101029190610be7565b60405180910390f35b610113610410565b005b34801561012157600080fd5b5061012a610650565b6040516101379190610be7565b60405180910390f35b34801561014c57600080fd5b5061015561065d565b6040516101629190610c11565b60405180910390f35b34801561017757600080fd5b50610180610685565b60405161018d9190610c8b565b60405180910390f35b61019e6101e7565b005b6101a86106af565b005b3480156101b657600080fd5b506101d160048036038101906101cc9190610cd2565b610973565b6040516101de9190610c11565b60405180910390f35b6802b5e3af16b1880000610226600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16346109bb90919063ffffffff16565b1015610267576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161025e90610d5c565b60405180910390fd5b346000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546102b59190610dab565b925050819055506001339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166354fd4d506040518163ffffffff1660e01b815260040160206040518083038186803b1580156103d357600080fd5b505afa1580156103e7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061040b9190610e16565b905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610495576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b600180549050811015610540576000600182815481106104bb576104ba610e43565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061053890610e72565b915050610498565b50600067ffffffffffffffff81111561055c5761055b610ebb565b5b60405190808252806020026020018201604052801561058a5781602001602082028036833780820191505090505b50600190805190602001906105a0929190610a97565b5060003373ffffffffffffffffffffffffffffffffffffffff16476040516105c790610f1b565b60006040518083038185875af1925050503d8060008114610604576040519150601f19603f3d011682016040523d82523d6000602084013e610609565b606091505b505090508061064d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161064490610f7c565b60405180910390fd5b50565b6802b5e3af16b188000081565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610734576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600060018054806020026020016040519081016040528092919081815260200182805480156107b857602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001906001019080831161076e575b5050505050905060005b81518110156108425760008282815181106107e0576107df610e43565b5b6020026020010151905060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061083a90610e72565b9150506107c2565b50600067ffffffffffffffff81111561085e5761085d610ebb565b5b60405190808252806020026020018201604052801561088c5781602001602082028036833780820191505090505b50600190805190602001906108a2929190610a97565b5060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16476040516108e990610f1b565b60006040518083038185875af1925050503d8060008114610926576040519150601f19603f3d011682016040523d82523d6000602084013e61092b565b606091505b505090508061096f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161096690610fe8565b60405180910390fd5b5050565b60006001828154811061098957610988610e43565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000806109c7836109f7565b90506000670de0b6b3a764000085836109e09190611008565b6109ea9190611091565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b158015610a4057600080fd5b505afa158015610a54573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a78919061113a565b5050509150506402540be40081610a8f91906111b5565b915050919050565b828054828255906000526020600020908101928215610b10579160200282015b82811115610b0f5782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610ab7565b5b509050610b1d9190610b21565b5090565b5b80821115610b3a576000816000905550600101610b22565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610b6e82610b43565b9050919050565b610b7e81610b63565b8114610b8957600080fd5b50565b600081359050610b9b81610b75565b92915050565b600060208284031215610bb757610bb6610b3e565b5b6000610bc584828501610b8c565b91505092915050565b6000819050919050565b610be181610bce565b82525050565b6000602082019050610bfc6000830184610bd8565b92915050565b610c0b81610b63565b82525050565b6000602082019050610c266000830184610c02565b92915050565b6000819050919050565b6000610c51610c4c610c4784610b43565b610c2c565b610b43565b9050919050565b6000610c6382610c36565b9050919050565b6000610c7582610c58565b9050919050565b610c8581610c6a565b82525050565b6000602082019050610ca06000830184610c7c565b92915050565b610caf81610bce565b8114610cba57600080fd5b50565b600081359050610ccc81610ca6565b92915050565b600060208284031215610ce857610ce7610b3e565b5b6000610cf684828501610cbd565b91505092915050565b600082825260208201905092915050565b7f596f75206e65656420746f207370656e64206d6f726520455448210000000000600082015250565b6000610d46601b83610cff565b9150610d5182610d10565b602082019050919050565b60006020820190508181036000830152610d7581610d39565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610db682610bce565b9150610dc183610bce565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610df657610df5610d7c565b5b828201905092915050565b600081519050610e1081610ca6565b92915050565b600060208284031215610e2c57610e2b610b3e565b5b6000610e3a84828501610e01565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000610e7d82610bce565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610eb057610eaf610d7c565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610f05600083610eea565b9150610f1082610ef5565b600082019050919050565b6000610f2682610ef8565b9150819050919050565b7f43616c6c207769746864726177206661696c6564000000000000000000000000600082015250565b6000610f66601483610cff565b9150610f7182610f30565b602082019050919050565b60006020820190508181036000830152610f9581610f59565b9050919050565b7f43686561706572207769746864726177206661696c6564210000000000000000600082015250565b6000610fd2601883610cff565b9150610fdd82610f9c565b602082019050919050565b6000602082019050818103600083015261100181610fc5565b9050919050565b600061101382610bce565b915061101e83610bce565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561105757611056610d7c565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061109c82610bce565b91506110a783610bce565b9250826110b7576110b6611062565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b6110e1816110c2565b81146110ec57600080fd5b50565b6000815190506110fe816110d8565b92915050565b6000819050919050565b61111781611104565b811461112257600080fd5b50565b6000815190506111348161110e565b92915050565b600080600080600060a0868803121561115657611155610b3e565b5b6000611164888289016110ef565b955050602061117588828901611125565b945050604061118688828901610e01565b935050606061119788828901610e01565b92505060806111a8888289016110ef565b9150509295509295909350565b60006111c082611104565b91506111cb83611104565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048211600084136000841316161561120a57611209610d7c565b5b817f8000000000000000000000000000000000000000000000000000000000000000058312600084126000841316161561124757611246610d7c565b5b827f8000000000000000000000000000000000000000000000000000000000000000058212600084136000841216161561128457611283610d7c565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff05821260008412600084121616156112c1576112c0610d7c565b5b82820290509291505056fea2646970667358221220398723ffa80f77fb900980741d620a4e47f4e73eeec0ddcae414d7905547e1f564736f6c63430008080033",
    "deployedBytecode": "0x60806040526004361061008a5760003560e01c8063893d20e811610059578063893d20e8146101405780639e87a5cd1461016b578063b60d428814610196578063be2693f0146101a0578063d7b4750c146101aa57610099565b80630343fb25146100a35780630d8e6e2c146100e05780633ccfd60b1461010b5780636b69a5921461011557610099565b36610099576100976101e7565b005b6100a16101e7565b005b3480156100af57600080fd5b506100ca60048036038101906100c59190610ba1565b610321565b6040516100d79190610be7565b60405180910390f35b3480156100ec57600080fd5b506100f5610369565b6040516101029190610be7565b60405180910390f35b610113610410565b005b34801561012157600080fd5b5061012a610650565b6040516101379190610be7565b60405180910390f35b34801561014c57600080fd5b5061015561065d565b6040516101629190610c11565b60405180910390f35b34801561017757600080fd5b50610180610685565b60405161018d9190610c8b565b60405180910390f35b61019e6101e7565b005b6101a86106af565b005b3480156101b657600080fd5b506101d160048036038101906101cc9190610cd2565b610973565b6040516101de9190610c11565b60405180910390f35b6802b5e3af16b1880000610226600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16346109bb90919063ffffffff16565b1015610267576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161025e90610d5c565b60405180910390fd5b346000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546102b59190610dab565b925050819055506001339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166354fd4d506040518163ffffffff1660e01b815260040160206040518083038186803b1580156103d357600080fd5b505afa1580156103e7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061040b9190610e16565b905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610495576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b600180549050811015610540576000600182815481106104bb576104ba610e43565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061053890610e72565b915050610498565b50600067ffffffffffffffff81111561055c5761055b610ebb565b5b60405190808252806020026020018201604052801561058a5781602001602082028036833780820191505090505b50600190805190602001906105a0929190610a97565b5060003373ffffffffffffffffffffffffffffffffffffffff16476040516105c790610f1b565b60006040518083038185875af1925050503d8060008114610604576040519150601f19603f3d011682016040523d82523d6000602084013e610609565b606091505b505090508061064d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161064490610f7c565b60405180910390fd5b50565b6802b5e3af16b188000081565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610734576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600060018054806020026020016040519081016040528092919081815260200182805480156107b857602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001906001019080831161076e575b5050505050905060005b81518110156108425760008282815181106107e0576107df610e43565b5b6020026020010151905060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061083a90610e72565b9150506107c2565b50600067ffffffffffffffff81111561085e5761085d610ebb565b5b60405190808252806020026020018201604052801561088c5781602001602082028036833780820191505090505b50600190805190602001906108a2929190610a97565b5060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16476040516108e990610f1b565b60006040518083038185875af1925050503d8060008114610926576040519150601f19603f3d011682016040523d82523d6000602084013e61092b565b606091505b505090508061096f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161096690610fe8565b60405180910390fd5b5050565b60006001828154811061098957610988610e43565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000806109c7836109f7565b90506000670de0b6b3a764000085836109e09190611008565b6109ea9190611091565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b158015610a4057600080fd5b505afa158015610a54573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a78919061113a565b5050509150506402540be40081610a8f91906111b5565b915050919050565b828054828255906000526020600020908101928215610b10579160200282015b82811115610b0f5782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610ab7565b5b509050610b1d9190610b21565b5090565b5b80821115610b3a576000816000905550600101610b22565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610b6e82610b43565b9050919050565b610b7e81610b63565b8114610b8957600080fd5b50565b600081359050610b9b81610b75565b92915050565b600060208284031215610bb757610bb6610b3e565b5b6000610bc584828501610b8c565b91505092915050565b6000819050919050565b610be181610bce565b82525050565b6000602082019050610bfc6000830184610bd8565b92915050565b610c0b81610b63565b82525050565b6000602082019050610c266000830184610c02565b92915050565b6000819050919050565b6000610c51610c4c610c4784610b43565b610c2c565b610b43565b9050919050565b6000610c6382610c36565b9050919050565b6000610c7582610c58565b9050919050565b610c8581610c6a565b82525050565b6000602082019050610ca06000830184610c7c565b92915050565b610caf81610bce565b8114610cba57600080fd5b50565b600081359050610ccc81610ca6565b92915050565b600060208284031215610ce857610ce7610b3e565b5b6000610cf684828501610cbd565b91505092915050565b600082825260208201905092915050565b7f596f75206e65656420746f207370656e64206d6f726520455448210000000000600082015250565b6000610d46601b83610cff565b9150610d5182610d10565b602082019050919050565b60006020820190508181036000830152610d7581610d39565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610db682610bce565b9150610dc183610bce565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610df657610df5610d7c565b5b828201905092915050565b600081519050610e1081610ca6565b92915050565b600060208284031215610e2c57610e2b610b3e565b5b6000610e3a84828501610e01565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000610e7d82610bce565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610eb057610eaf610d7c565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610f05600083610eea565b9150610f1082610ef5565b600082019050919050565b6000610f2682610ef8565b9150819050919050565b7f43616c6c207769746864726177206661696c6564000000000000000000000000600082015250565b6000610f66601483610cff565b9150610f7182610f30565b602082019050919050565b60006020820190508181036000830152610f9581610f59565b9050919050565b7f43686561706572207769746864726177206661696c6564210000000000000000600082015250565b6000610fd2601883610cff565b9150610fdd82610f9c565b602082019050919050565b6000602082019050818103600083015261100181610fc5565b9050919050565b600061101382610bce565b915061101e83610bce565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561105757611056610d7c565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061109c82610bce565b91506110a783610bce565b9250826110b7576110b6611062565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b6110e1816110c2565b81146110ec57600080fd5b50565b6000815190506110fe816110d8565b92915050565b6000819050919050565b61111781611104565b811461112257600080fd5b50565b6000815190506111348161110e565b92915050565b600080600080600060a0868803121561115657611155610b3e565b5b6000611164888289016110ef565b955050602061117588828901611125565b945050604061118688828901610e01565b935050606061119788828901610e01565b92505060806111a8888289016110ef565b9150509295509295909350565b60006111c082611104565b91506111cb83611104565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048211600084136000841316161561120a57611209610d7c565b5b817f8000000000000000000000000000000000000000000000000000000000000000058312600084126000841316161561124757611246610d7c565b5b827f8000000000000000000000000000000000000000000000000000000000000000058212600084136000841216161561128457611283610d7c565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff05821260008412600084121616156112c1576112c0610d7c565b5b82820290509291505056fea2646970667358221220398723ffa80f77fb900980741d620a4e47f4e73eeec0ddcae414d7905547e1f564736f6c63430008080033",
    "devdoc": {
        "author": "Light Rao",
        "details": "This implements price feeds as our library",
        "kind": "dev",
        "methods": {
            "fund()": {
                "details": "This implements price feeds as our library"
            }
        },
        "title": "A contract for crowd fundding",
        "version": 1
    },
    "userdoc": {
        "kind": "user",
        "methods": {
            "constructor": {
                "notice": "constructor"
            },
            "fund()": {
                "notice": "This function funds this contract"
            },
            "getOwner()": {
                "notice": "view / pure"
            }
        },
        "notice": "This contract is to demao a simple fundding contract",
        "version": 1
    },
    "storageLayout": {
        "storage": [
            {
                "astId": 59,
                "contract": "contracts/FundMe.sol:FundMe",
                "label": "s_addressToAmountFunded",
                "offset": 0,
                "slot": "0",
                "type": "t_mapping(t_address,t_uint256)"
            },
            {
                "astId": 62,
                "contract": "contracts/FundMe.sol:FundMe",
                "label": "s_funders",
                "offset": 0,
                "slot": "1",
                "type": "t_array(t_address)dyn_storage"
            },
            {
                "astId": 74,
                "contract": "contracts/FundMe.sol:FundMe",
                "label": "s_priceFeed",
                "offset": 0,
                "slot": "2",
                "type": "t_contract(AggregatorV3Interface)45"
            }
        ],
        "types": {
            "t_address": {
                "encoding": "inplace",
                "label": "address",
                "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
                "base": "t_address",
                "encoding": "dynamic_array",
                "label": "address[]",
                "numberOfBytes": "32"
            },
            "t_contract(AggregatorV3Interface)45": {
                "encoding": "inplace",
                "label": "contract AggregatorV3Interface",
                "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_uint256)": {
                "encoding": "mapping",
                "key": "t_address",
                "label": "mapping(address => uint256)",
                "numberOfBytes": "32",
                "value": "t_uint256"
            },
            "t_uint256": {
                "encoding": "inplace",
                "label": "uint256",
                "numberOfBytes": "32"
            }
        }
    }
}
